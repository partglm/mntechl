{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "mntechl",
	"patterns": [
	  { "include": "#keywords" },
	  { "include": "#operators" },
	  { "include": "#strings" },
	  { "include": "#numbers" },
	  { "include": "#comments" },
	  { "include": "#functions" },
	  { "include": "#async" },
	  { "include": "#arrowFunctions" },
	  { "include": "#booleans" },
	  { "include": "#objects" },
	  { "include": "#lists" }
	],
	"repository": {
	  "keywords": {
		"patterns": [
		  {
			"name": "keyword.control.mntechl",
			"match": "\\b(if|else|while|do|for|switch|case|break|continue|return|try|catch|finally|throw|function|class|new|extends|import|export|default)\\b"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"name": "keyword.operator.assignment.mntechl",
			"match": "(\\+=|-=|\\*=|/=|%=|=)"
		  },
		  {
			"name": "keyword.operator.arithmetic.mntechl",
			"match": "(\\+|-|\\*|/|%|\\+\\+|--)"
		  },
		  {
			"name": "keyword.operator.comparison.mntechl",
			"match": "(==|!=|===|!==|<|<=|>|>=)"
		  },
		  {
			"name": "keyword.operator.logical.mntechl",
			"match": "(\\&\\&|\\|\\||!)"
		  },
		  {
			"name": "keyword.operator.bitwise.mntechl",
			"match": "(\\&|\\||\\^|~|<<|>>|>>>)"
		  }
		]
	  },
	  "strings": {
		"patterns": [
		  {
			"name": "string.quoted.double.mntechl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			  {
				"name": "constant.character.escape.mntechl",
				"match": "\\\\."
			  }
			]
		  },
		  {
			"name": "string.quoted.single.mntechl",
			"begin": "'",
			"end": "'",
			"patterns": [
			  {
				"name": "constant.character.escape.mntechl",
				"match": "\\\\."
			  }
			]
		  },
		  {
			"name": "string.template.mntechl",
			"begin": "`",
			"end": "`",
			"patterns": [
			  {
				"name": "template.expression.mntechl",
				"begin": "\\$\\{",
				"end": "\\}"
			  }
			]
		  }
		]
	  },
	  "numbers": {
		"patterns": [
		  {
			"name": "constant.numeric.integer.mntechl",
			"match": "\\b\\d+\\b"
		  },
		  {
			"name": "constant.numeric.float.mntechl",
			"match": "\\b\\d+\\.\\d+\\b"
		  },
		  {
			"name": "constant.numeric.hexadecimal.mntechl",
			"match": "\\b0x[0-9A-Fa-f]+\\b"
		  }
		]
	  },
	  "comments": {
		"patterns": [
		  { "name": "comment.line.double-slash.mntechl", "begin": "//", "end": "$" },
		  { "name": "comment.block.mntechl", "begin": "/\\*", "end": "\\*/" }
		]
	  },
	  "functions": {
		"patterns": [
		  {
			"name": "entity.name.function.mntechl",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
		  }
		]
	  },
	  "async": {
		"patterns": [
		  {
			"name": "keyword.control.async.mntechl",
			"match": "\\b(async|await)\\b"
		  }
		]
	  },
	  "arrowFunctions": {
		"patterns": [
		  {
			"name": "keyword.control.arrow-function.mntechl",
			"match": "\\((.*?)\\)\\s*=>"
		  }
		]
	  },
	  "booleans": {
		"patterns": [
		  {
			"name": "constant.language.boolean.mntechl",
			"match": "\\b(true|false)\\b"
		  }
		]
	  },
	  "objects": {
		"patterns": [
		  {
			"name": "variable.language.object.mntechl",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
			  {
				"name": "string.quoted.mntechl",
				"match": "\"[^\"]*\"|'[^']*'"
			  }
			]
		  }
		]
	  },
	  "lists": {
		"patterns": [
		  {
			"name": "variable.language.list.mntechl",
			"match": "\\[.*?\\]"
		  }
		]
	  }
	},
	"scopeName": "source.mntechl"
  }
  